version: '3.9'

services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
      POSTGRES_USER: ${PG_USER}
    ports:
      - 5432:5432
    tmpfs:
      - /var/lib/postgresql/data #Use a temporary in-memory file system
    volumes:
      - ./1_postgres:/etc/postgresql
    command: "postgres -c config_file=/etc/postgresql/postgresql.conf"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 30s
      timeout: 30s
      retries: 3
  
  fakedata: 
    build:
      context: ./1_postgres
    depends_on:
      - db
    volumes:
      - ./1_postgres/load_fakedata.py:/load_fakedata.py
    command: sh -c "sleep 10 && python load_fakedata.py"

  redis: 
    image: redis
    restart: always

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  pgsync: 
    image: govpf/pgsync
    restart: always
    volumes:
      - certs:/certs
      - ./2_elastic_pgsync:/config
    depends_on:
      - db
      - es01
    environment:
      PG_USER: ${PG_USER}
      PG_HOST: db
      PG_PORT: 5432
      PG_PASSWORD: ${PG_PASSWORD}
      ELASTICSEARCH_HOST: es01
      ELASTICSEARCH_PORT: 9200
      ELASTICSEARCH_USE_SSL: true
      ELASTICSEARCH_CA_CERTS: /certs/ca/ca.crt
      ELASTICSEARCH_USER: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD}
      REDIS_HOST: redis
    command: >
      bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert /certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Starting pgsync";
        bootstrap -c /config/schema.json
        pgsync -c /config/schema.json --daemon;
      '

  create_mappings:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./2_elastic_pgsync:/mappings
      - certs:/usr/share/elasticsearch/config/certs
    depends_on:
      - es01
    command: >
      bash -c '
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Delete mappings";
        curl -s --cacert config/certs/ca/ca.crt -X DELETE "https://elastic:${ELASTIC_PASSWORD}@es01:9200/mycustomers?ignore_unavailable=true" -H "Content-Type: application/json";
        echo "Create mappings";
        curl -s --cacert config/certs/ca/ca.crt -X PUT "https://elastic:${ELASTIC_PASSWORD}@es01:9200/mycustomers?pretty" -H "Content-Type: application/json" -d @/mappings/mappings.json;
        echo "All mappings created";
      '

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    tmpfs:
      - /usr/share/elasticsearch/data  # Use a temporary in-memory file system
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  nodejs-app:
    depends_on:
      - es01
      - db 
    build:
      context: ./3_api
    ports:
      - "4000:4000"

  react-app:
    build:
      context: ./4_client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local